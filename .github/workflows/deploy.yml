name: Deploy Telegram Bot

on:
  push:
    branches:
      - main # Pipeline startet bei jedem Push auf den main-Branch

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Tests
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: pytest tests/ -v

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: success() # Nur deployen, wenn die Tests erfolgreich waren
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Schritt 1: SSH-Schl√ºssel sicher einrichten
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        name: id_ed25519 # Name der Schl√ºsseldatei
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

    # Schritt 2: Known Hosts Eintrag f√ºr den Server hinzuf√ºgen
    - name: Add to Known Hosts
      run: ssh-keyscan -H 157.90.232.184 >> ~/.ssh/known_hosts

    # Schritt 3: Deployment-Skript sicher ausf√ºhren
    - name: Deploy to Server
      env: # Umgebungsvariablen f√ºr das Remote-Skript
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        GOOGLE_DRIVE_ROOT_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_ROOT_FOLDER_ID }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: |
        ssh -i ~/.ssh/id_ed25519 root@157.90.232.184 'bash -s' <<'EOF'
          # Dieses Skript wird jetzt sicher auf dem Server ausgef√ºhrt
          echo "‚úÖ SSH connection successful. Deploying..."
          
          # Fehlerbehandlung: Skript bei Fehler abbrechen
          set -e

          # Navigate to project directory
          cd /var/www/mga-portal
          
          # Pull latest changes
          echo "üîÑ Pulling latest changes..."
          git pull origin main
          
          # Install/update dependencies
          echo "üì¶ Installing dependencies..."
          pip3 install -r requirements.txt
          
          # Create environment file for PM2
          echo "üîß Creating .env file..."
          cat > .env <<INNER_EOF
          TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
          GROQ_API_KEY=${GROQ_API_KEY}
          GOOGLE_SERVICE_ACCOUNT_JSON=${GOOGLE_SERVICE_ACCOUNT_JSON}
          GOOGLE_DRIVE_ROOT_FOLDER_ID=${GOOGLE_DRIVE_ROOT_FOLDER_ID}
          SUPABASE_URL=${SUPABASE_URL}
          SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
INNER_EOF
          
          # Manage PM2 process
          echo "üîÑ Managing PM2 process..."
          pm2 restart telegram-google --update-env || pm2 start src/telegram_agent_google.py --name telegram-google --interpreter python3
          
          # Save PM2 configuration
          pm2 save
          
          echo "üìä PM2 Status:"
          pm2 list

          echo "‚úÖ Deployment completed successfully!"
        EOF