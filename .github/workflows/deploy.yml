name: Deploy Telegram Bot

on:
  push:
    branches:
      - main # Pipeline startet bei jedem Push auf den main-Branch

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Tests
      env:
        TELEGRAM_BOT_TOKEN: '${{ secrets.TELEGRAM_BOT_TOKEN }}'
        GROQ_API_KEY: '${{ secrets.GROQ_API_KEY }}'
        GOOGLE_SERVICE_ACCOUNT_JSON: '${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}'
        SUPABASE_URL: '${{ secrets.SUPABASE_URL }}'
        SUPABASE_ANON_KEY: '${{ secrets.SUPABASE_ANON_KEY }}'
      run: pytest tests/ -v

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: success() # Nur deployen, wenn die Tests erfolgreich waren
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Debug: SSH Key Format Ã¼berprÃ¼fen
    - name: Debug SSH Key
      run: |
        echo "Checking SSH key format..."
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | head -n 1
        echo "..."
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | tail -n 1
        echo "Total lines:"
        echo "${{ secrets.SSH_PRIVATE_KEY }}" | wc -l
    
    # Schritt 1: SSH-SchlÃ¼ssel manuell einrichten
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H 157.90.232.184 >> ~/.ssh/known_hosts

    # Schritt 3: Deployment-Skript sicher ausfÃ¼hren
    - name: Deploy to Server
      env: # Umgebungsvariablen fÃ¼r das Remote-Skript
        TELEGRAM_BOT_TOKEN: '${{ secrets.TELEGRAM_BOT_TOKEN }}'
        GROQ_API_KEY: '${{ secrets.GROQ_API_KEY }}'
        GOOGLE_SERVICE_ACCOUNT_JSON: '${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}'
        GOOGLE_DRIVE_ROOT_FOLDER_ID: '${{ secrets.GOOGLE_DRIVE_ROOT_FOLDER_ID }}'
        SUPABASE_URL: '${{ secrets.SUPABASE_URL }}'
        SUPABASE_ANON_KEY: '${{ secrets.SUPABASE_ANON_KEY }}'
      run: |
        ssh -i ~/.ssh/id_ed25519 root@157.90.232.184 'bash -s' <<'EOF'
          # Dieses Skript wird jetzt sicher auf dem Server ausgefÃ¼hrt
          echo "âœ… SSH connection successful. Deploying..."
          
          # Fehlerbehandlung: Skript bei Fehler abbrechen
          set -e

          # Navigate to project directory
          cd /var/www/mga-portal
          
          # Pull latest changes
          echo "ðŸ”„ Pulling latest changes..."
          git pull origin main
          
          # Install/update dependencies
          echo "ðŸ“¦ Installing dependencies..."
          pip3 install -r requirements.txt
          
          # Create environment file for PM2
          echo "ðŸ”§ Creating .env file..."
          echo "TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}" > .env
          echo "GROQ_API_KEY=${GROQ_API_KEY}" >> .env
          echo "GOOGLE_SERVICE_ACCOUNT_JSON=${GOOGLE_SERVICE_ACCOUNT_JSON}" >> .env
          echo "GOOGLE_DRIVE_ROOT_FOLDER_ID=${GOOGLE_DRIVE_ROOT_FOLDER_ID}" >> .env
          echo "SUPABASE_URL=${SUPABASE_URL}" >> .env
          echo "SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}" >> .env
          
          # Manage PM2 process
          echo "ðŸ”„ Managing PM2 process..."
          pm2 restart telegram-google --update-env || pm2 start src/telegram_agent_google.py --name telegram-google --interpreter python3
          
          # Save PM2 configuration
          pm2 save
          
          echo "ðŸ“Š PM2 Status:"
          pm2 list

          echo "âœ… Deployment completed successfully!"
        EOF