name: Deploy Telegram Bot

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Tests
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      run: pytest tests/ -v

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to Server via SSH (Docker)
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: 157.90.232.184
        username: root
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Fehlerbehandlung
          set -e

          # Gehe zum Projektverzeichnis
          cd /var/www/mga-portal
          
          # Hole den neuesten Code
          echo "üîÑ Pulling latest changes..."
          git pull origin main

          # √úbergebe die Secrets als Umgebungsvariablen an Docker Compose
          export TELEGRAM_BOT_TOKEN='${{ secrets.TELEGRAM_BOT_TOKEN }}'
          export GROQ_API_KEY='${{ secrets.GROQ_API_KEY }}'
          export GOOGLE_SERVICE_ACCOUNT_JSON_BASE64='${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON_BASE64 }}'
          export GOOGLE_DRIVE_ROOT_FOLDER_ID='${{ secrets.GOOGLE_DRIVE_ROOT_FOLDER_ID }}'
          export SUPABASE_URL='${{ secrets.SUPABASE_URL }}'
          export SUPABASE_ANON_KEY='${{ secrets.SUPABASE_ANON_KEY }}'
          
          # Erstelle project_counter.json falls nicht vorhanden
          if [ ! -f project_counter.json ]; then
            echo '{"counter": 0}' > project_counter.json
          fi
          
          # Baue und starte den Container
          echo "üê≥ Building and starting Docker container..."
          docker-compose down || true
          docker-compose up -d --build
          
          # Warte kurz und pr√ºfe den Status
          sleep 5
          docker ps | grep mga-bot-container
          
          # Zeige die letzten Logs
          echo ""
          echo "üìã Container logs:"
          docker logs mga-bot-container --tail 20
          
          # Registriere Webhook
          echo ""
          echo "üîó Registering Telegram webhook..."
          docker exec mga-bot-container python -c "
import os
import requests

token = os.getenv('TELEGRAM_BOT_TOKEN')
webhook_url = 'https://bot.marcelgladbach.com/telegram-webhook'

# Delete old webhook
delete_resp = requests.get(f'https://api.telegram.org/bot{token}/deleteWebhook')
print(f'Delete old webhook: {delete_resp.json()}')

# Set new webhook
response = requests.post(
    f'https://api.telegram.org/bot{token}/setWebhook',
    data={'url': webhook_url, 'drop_pending_updates': True}
)

result = response.json()
if result.get('ok'):
    print(f'‚úÖ Webhook registered: {webhook_url}')
else:
    print(f'‚ùå Webhook registration failed: {result}')
"
          
          echo ""
          echo "‚úÖ Docker deployment completed successfully!"